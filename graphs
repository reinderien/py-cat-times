#!/usr/bin/env R --vanilla -q -f
options(echo=F)

library(ggplot2)
library(scales)


# Data #####################################################################

times = transform(read.csv('times.csv'),
                  Throughput=Size/Duration,
                  MajorVersion=factor(substr(Version, 0, 1)))

# Pick input size closest to 500
normal_size = times[min(abs(times$Size - 500)),]$Size

# For a given major version and method, at normal_size, find the median duration
meds = aggregate(Duration ~ MajorVersion+Method, FUN=median,
                  data=times[times$Size==normal_size,])
colnames(meds)[3] = 'BaseDuration'
times = merge(times, meds)
times$NormalDuration = with(times, Duration/BaseDuration)

# Plot utilities ###########################################################
# Lifted directly from
# https://github.com/reinderien/capmeter/blob/master/range-analysis.r

# Adapted from https://stackoverflow.com/questions/30179442
log_breaks = function(maj, radix=10) {
  function(x) {
    minx = floor(min(logb(x, radix), na.rm=T)) - 1
    maxx = ceiling(max(logb(x, radix), na.rm=T)) + 1
    n_major = maxx - minx + 1
    major_breaks = minx:maxx
    if (maj) {
      breaks = major_breaks
    } else {
      breaks = rep(logb(1:(radix-1), radix), times=n_major) +
               rep(major_breaks, each=radix-1)
    }
    radix^breaks
  }
}
# See https://github.com/tidyverse/ggplot2/blob/master/R/scale-continuous.r#L160
scale_x_log_eng = function(..., radix=10) {
  scale_x_continuous(..., trans=log_trans(radix),
                     breaks=log_breaks(T, radix),
                     minor_breaks=log_breaks(F, radix))
}
scale_y_log_eng = function(..., radix=10) {
  scale_y_continuous(..., trans=log_trans(radix),
                     breaks=log_breaks(T, radix),
                     minor_breaks=log_breaks(F, radix))
}
xaxis_text_vert = function() {
  theme(axis.text.x=element_text(angle=90))
}


# Plotting #################################################################

# Adapt this for non-Mac
machine = system('sysctl -n machdep.cpu.brand_string', intern=TRUE)

label_map = setNames(c('GC disabled', 'GC enabled'), c('FALSE', 'TRUE'))
label_gc = function(strings) label_map[strings]

throughput_plot = function(title, facet_expr, fill_var) {
    ggplot(times, aes_string(x='Size', y='Throughput', colour=fill_var)) +
        facet_grid(facet_expr, labeller=labeller(GC=label_gc)) +
        geom_smooth(level=0.95, span=0.8, aes_string(fill=fill_var), size=0.5) +
        xaxis_text_vert() + scale_x_log_eng() +
        theme(panel.grid.minor = element_line(size=0.1)) +
        labs(title=sprintf('String append across %s', title),
             subtitle=machine, caption=expression(gamma == 0.95),
             x='Input size (bytes)', y='Throughput (bytes/s)')
}

throughput_plot('Python versions', GC~Version, 'Method')
throughput_plot('methods', GC~Method, 'Version')

# For the next plot, ignore GC and minor version. This leaves method, major version and input
# size as independent, and normalized duration as dependent.

ggplot(times, aes(x=Size, y=NormalDuration, colour=Method, linetype=MajorVersion)) +
    geom_smooth(se=FALSE, span=0.2, aes(fill=Method), size=0.5) +
    scale_x_log_eng() + xaxis_text_vert() +
    scale_y_log_eng() +
    theme(panel.grid.minor = element_line(size=0.1)) +
    labs(title='String append time complexity',
         x='Input size (bytes)', y='Normalized time')
