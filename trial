#!/usr/bin/env python

from sys import version, version_info
from timeit import timeit  # Compatibility: ver >= 2.6

# ver = version.partition('\n')[0].rstrip()
ver = '.'.join(str(v) for v in version_info[:3])
print(ver)

if version_info[0] == 2:
    from StringIO import StringIO
else:
    from io import StringIO
    xrange = range


def build_plus():
    output = ''
    for _ in xrange(input_len):
        output += 'a'
    return output


def build_join():
    return ''.join('a' for _ in xrange(input_len))


def build_bytes_plus():
    output = b''
    for _ in xrange(input_len):
        output += b'a'
    return output


def build_stringio():
    output = StringIO()
    for _ in xrange(input_len):
        output.write('a')
    return output.getvalue()


builds = {'plus': build_plus,
          'join': build_join,
          'bytes_plus': build_bytes_plus,
          'stringio': build_stringio}

if version_info[0] == 2:
    import cStringIO

    def build_cstringio():
        output = cStringIO.StringIO()
        for _ in xrange(input_len):
            output.write('a')
        return output.getvalue()

    builds['cstringio'] = build_cstringio
else:
    from io import BytesIO

    def build_bytesio():
        output = BytesIO()
        for _ in xrange(input_len):
            output.write(b'a')
        return output.getvalue()

    builds['bytesio'] = build_bytesio

resfile = open('times.csv', 'a')
max_order = 6

for build_name, build_fun in builds.items():
    for input_len_exp in range(1, max_order):
        input_len = 10**input_len_exp
        reps = 10**(max_order - 1 - input_len_exp)
        dur = timeit(build_fun, number=reps)/reps
        resfile.write('"%s","%s",%d,%.3g\n' % (ver, build_name, input_len, dur))
